// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "echo.proto" (package "echo", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Echo } from "./echo";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Message } from "./echo";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service echo.Echo
 */
export interface IEchoClient {
    /**
     * @generated from protobuf rpc: Hello(echo.Message) returns (echo.Message);
     */
    hello(input: Message, options?: RpcOptions): UnaryCall<Message, Message>;
    /**
     * @generated from protobuf rpc: Hola(echo.Message) returns (echo.Message);
     */
    hola(input: Message, options?: RpcOptions): UnaryCall<Message, Message>;
    /**
     * @generated from protobuf rpc: Konnichiwa(echo.Message) returns (echo.Message);
     */
    konnichiwa(input: Message, options?: RpcOptions): UnaryCall<Message, Message>;
    /**
     * @generated from protobuf rpc: Hang(echo.Message) returns (echo.Message);
     */
    hang(input: Message, options?: RpcOptions): UnaryCall<Message, Message>;
    /**
     * @generated from protobuf rpc: Divide(echo.Message) returns (stream echo.Message);
     */
    divide(input: Message, options?: RpcOptions): ServerStreamingCall<Message, Message>;
    /**
     * @generated from protobuf rpc: Concat(stream echo.Message) returns (echo.Message);
     */
    concat(options?: RpcOptions): ClientStreamingCall<Message, Message>;
    /**
     * @generated from protobuf rpc: Batch(stream echo.Message) returns (stream echo.Message);
     */
    batch(options?: RpcOptions): DuplexStreamingCall<Message, Message>;
}
/**
 * @generated from protobuf service echo.Echo
 */
export class EchoClient implements IEchoClient, ServiceInfo {
    typeName = Echo.typeName;
    methods = Echo.methods;
    options = Echo.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Hello(echo.Message) returns (echo.Message);
     */
    hello(input: Message, options?: RpcOptions): UnaryCall<Message, Message> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Message, Message>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Hola(echo.Message) returns (echo.Message);
     */
    hola(input: Message, options?: RpcOptions): UnaryCall<Message, Message> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Message, Message>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Konnichiwa(echo.Message) returns (echo.Message);
     */
    konnichiwa(input: Message, options?: RpcOptions): UnaryCall<Message, Message> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Message, Message>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Hang(echo.Message) returns (echo.Message);
     */
    hang(input: Message, options?: RpcOptions): UnaryCall<Message, Message> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<Message, Message>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Divide(echo.Message) returns (stream echo.Message);
     */
    divide(input: Message, options?: RpcOptions): ServerStreamingCall<Message, Message> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<Message, Message>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Concat(stream echo.Message) returns (echo.Message);
     */
    concat(options?: RpcOptions): ClientStreamingCall<Message, Message> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<Message, Message>("clientStreaming", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: Batch(stream echo.Message) returns (stream echo.Message);
     */
    batch(options?: RpcOptions): DuplexStreamingCall<Message, Message> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<Message, Message>("duplex", this._transport, method, opt);
    }
}
